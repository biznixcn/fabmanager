# encoding: utf-8
# INSTRUCTIONS:
#
# - Create a fabfile.py at the Django project's directory (e.g.: $VIRTUAL_ENV/project),
#   with the following imports:
#
#    from whitehat import fabfile
#    from whitehat.fabfile import *
#
# - Extend (do not replace!) the ENVS dictionary. See below for a complete description
#   of all possible entries.
#
# - Define tasks for each environment, that can be specified in the command line
#   (e.g.: fab myenv update)
#
#    def myenv():
#        fabfile._setup_environment('myenv')
#
# - Revise other configuration strings, and override them if needed
#
# That's it!

TODO list:

- Remove dependency on virtualenvwrapper


ENVS dictionary

An empty ENVS dictionary is defined by fabmanager/fabfile.py. Each project's fabfile.py
must extend (not replace!) this dictionary with an update() command:

    ENVS.update({
        'myenv': {
            'host': 'servername.domain.com',
            'workon': '/opt/python',
            'virtualenv': 'myvirtualenv',
            'project': 'myproject',
            'settings': 'settings',
            etc.

Below is a complete list of parameters. All are mandatory except when noted:

host        Name or IP of the remote server
host_alias  (optional) Host alias(es), separated by ' ', for Apache conf file
workon      Parent of the virtualenv directory (equals virtualenvwrapper WORKON_HOME)
virtualenv  Virtualenv name
project     Project name. Actual project location is thus given by $workon/$virtualenv/$project
settings    settings.py being used (e.g.: 'settings', 'settings_custom')
git_repo    (optional) Git repo, mandatory if setup is being made by fabmanager
git_branch  (optional) If not provided, 'master' is assumed
